apiVersion: apps/v1
kind: Deployment
metadata:
  name: kallax
  namespace: gamer-gambit
  labels:
    app: kallax
    component: discord-bot
    version: v1.0.0
spec:
  replicas: 1  # Discord bots should typically run as single instance
  strategy:
    type: Recreate  # Ensure only one instance runs at a time
  selector:
    matchLabels:
      app: kallax
      component: discord-bot
  template:
    metadata:
      labels:
        app: kallax
        component: discord-bot
        version: v1.0.0
    spec:
      containers:
      - name: kallax
        image: python:3.11-slim
        imagePullPolicy: Always
        workingDir: /app
        command:
          - /bin/bash
          - -c
          - |
            echo "Installing system dependencies..."
            apt-get update && apt-get install -y git
            echo "Cloning source code..."
            git clone https://github.com/yourusername/gamer-gambit.git /tmp/repo || echo "Using local files"
            # For now, create a basic structure
            mkdir -p /app/cogs /app/utils
            echo "Installing Python dependencies..."
            cat > /app/requirements.txt << 'EOF'
            discord.py>=2.3.0
            aiohttp>=3.8.0
            aiosqlite>=0.19.0
            python-dotenv>=1.0.0
            beautifulsoup4>=4.12.0
            pillow>=10.0.0
            requests>=2.31.0
            xmltodict>=0.13.0
            EOF
            pip install --no-cache-dir -r /app/requirements.txt
            echo "Creating basic bot structure..."
            # Copy files from the mounted source if available, otherwise create minimal version
            cat > /app/bot.py << 'EOF'
            import asyncio
            import logging
            import os
            import discord
            from discord.ext import commands
            from dotenv import load_dotenv

            load_dotenv()

            logging.basicConfig(
                level=logging.INFO,
                format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
            )

            logger = logging.getLogger(__name__)

            class KallaxBot(commands.Bot):
                def __init__(self):
                    intents = discord.Intents.default()
                    intents.message_content = True
                    
                    super().__init__(
                        command_prefix=os.getenv('COMMAND_PREFIX', '!'),
                        intents=intents,
                        description="Kallax - Your Gaming Companion Bot"
                    )
                    
                async def on_ready(self):
                    logger.info(f'{self.user} has connected to Discord!')
                    activity = discord.Game(name="Board Games | !help")
                    await self.change_presence(activity=activity)

            async def main():
                token = os.getenv('DISCORD_TOKEN')
                if not token:
                    logger.error("DISCORD_TOKEN not found in environment variables")
                    return
                    
                bot = KallaxBot()
                
                try:
                    await bot.start(token)
                except KeyboardInterrupt:
                    logger.info("Bot shutdown requested")
                finally:
                    await bot.close()

            if __name__ == "__main__":
                asyncio.run(main())
            EOF
            echo "Starting Kallax Discord Bot..."
            python bot.py
        env:
        # Load configuration from secrets
        - name: DISCORD_TOKEN
          valueFrom:
            secretKeyRef:
              name: kallax-config
              key: DISCORD_TOKEN
        - name: DISCORD_GUILD_ID
          valueFrom:
            secretKeyRef:
              name: kallax-config
              key: DISCORD_GUILD_ID
              optional: true
        - name: DATABASE_PATH
          valueFrom:
            secretKeyRef:
              name: kallax-config
              key: DATABASE_PATH
        - name: BGG_API_BASE_URL
          valueFrom:
            secretKeyRef:
              name: kallax-config
              key: BGG_API_BASE_URL
        - name: COMMAND_PREFIX
          valueFrom:
            secretKeyRef:
              name: kallax-config
              key: COMMAND_PREFIX
        - name: DEFAULT_WEEKLY_STATS_CHANNEL
          valueFrom:
            secretKeyRef:
              name: kallax-config
              key: DEFAULT_WEEKLY_STATS_CHANNEL
        - name: STEAM_API_KEY
          valueFrom:
            secretKeyRef:
              name: kallax-api-keys
              key: STEAM_API_KEY
              optional: true
        - name: XBOX_API_KEY
          valueFrom:
            secretKeyRef:
              name: kallax-api-keys
              key: XBOX_API_KEY
              optional: true
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        volumeMounts:
        - name: data-volume
          mountPath: /app/data
        # Health checks
        livenessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - "ps aux | grep -v grep | grep 'python bot.py'"
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - "ps aux | grep -v grep | grep 'python bot.py'"
          initialDelaySeconds: 30
          periodSeconds: 15
          timeoutSeconds: 5
          failureThreshold: 5
      # Graceful shutdown
      terminationGracePeriodSeconds: 30
      volumes:
      - name: data-volume
        persistentVolumeClaim:
          claimName: kallax-data
      restartPolicy: Always
