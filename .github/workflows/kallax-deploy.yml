name: Kallax Discord Bot CI/CD

on:
  push:
    branches: [ main, test ]
    paths: 
      - 'discord/kallax/**'
      - '.github/workflows/kallax-deploy.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'discord/kallax/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - test
      force_deploy:
        description: 'Force deployment even if no changes'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: kallax-discord-bot
  BOT_DIRECTORY: discord/kallax

jobs:
  # Test and Build Job
  build-and-test:
    runs-on: [self-hosted, kubernetes, discord-bot]
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('discord/kallax/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      working-directory: ${{ env.BOT_DIRECTORY }}
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Lint Python code
      working-directory: ${{ env.BOT_DIRECTORY }}
      run: |
        pip install flake8
        # Stop build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Warning for other issues (non-blocking)
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics || true

    - name: Run basic bot validation
      working-directory: ${{ env.BOT_DIRECTORY }}
      run: |
        # Validate bot imports and structure
        python -c "
        import sys, os
        sys.path.append('.')
        try:
            from utils.database import Database
            from utils.bgg_api import BGGApiClient
            print('✅ Bot modules imported successfully')
        except ImportError as e:
            print(f'❌ Import error: {e}')
            sys.exit(1)
        "

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=commit-
          type=raw,value=latest,enable={{is_default_branch}}
        flavor: |
          latest=auto
          prefix=
          suffix=

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ${{ env.BOT_DIRECTORY }}
        file: ${{ env.BOT_DIRECTORY }}/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Generate deployment summary
      run: |
        echo "## 🐳 Container Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Image:** ${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Digest:** ${{ steps.build.outputs.digest }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Registry:** ${{ env.REGISTRY }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Context:** ${{ env.BOT_DIRECTORY }}" >> $GITHUB_STEP_SUMMARY

  # Production Deployment
  deploy-production:
    needs: build-and-test
    runs-on: [self-hosted, kubernetes, discord-bot]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: 
      name: production
      url: https://discord.com/api/oauth2/authorize?client_id=YOUR_BOT_CLIENT_ID
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Log deployment start
      run: |
        echo "🚀 Starting production deployment for Kallax bot..."
        echo "Commit: ${{ github.sha }}"
        echo "Author: ${{ github.actor }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Directory: ${{ env.BOT_DIRECTORY }}"

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for production
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix=commit-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=production
        flavor: |
          latest=auto
          prefix=
          suffix=

    - name: Build and push production Docker image
      uses: docker/build-push-action@v5
      with:
        context: ${{ env.BOT_DIRECTORY }}
        file: ${{ env.BOT_DIRECTORY }}/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Deploy to Kubernetes
      run: |
        echo "🚀 Deploying Kallax bot to production..."
        
        # Get the production image tag (lowercase for registry compatibility)
        REPO_OWNER_LOWER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
        IMAGE_TAG="${{ env.REGISTRY }}/${REPO_OWNER_LOWER}/${{ env.IMAGE_NAME }}:production"
        echo "Using image: $IMAGE_TAG"
        
        # Apply the production environment using kustomize
        echo "📋 Applying production kustomization..."
        kubectl apply -k discord/kallax/k8s/environments/production/
        
        # Update the deployment with the freshly built image
        echo "🔄 Updating deployment image..."
        kubectl set image deployment/prod-kallax kallax="$IMAGE_TAG" -n gamer-gambit
        
        # Wait for rollout to complete
        echo "⏳ Waiting for deployment rollout..."
        kubectl rollout status deployment/prod-kallax -n gamer-gambit --timeout=300s

    - name: Verify deployment
      run: |
        echo "✅ Verifying production deployment..."
        kubectl get pods -n gamer-gambit -l app=kallax
        
        # Check if pod is running
        kubectl wait --for=condition=ready pod -l app=kallax -n gamer-gambit --timeout=180s
        
        echo "📋 Recent logs:"
        kubectl logs -n gamer-gambit deployment/prod-kallax --tail=20

    - name: Deployment success notification
      if: success()
      run: |
        echo "## 🎉 Production Deployment Successful!" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment:** Production" >> $GITHUB_STEP_SUMMARY
        echo "- **Namespace:** gamer-gambit" >> $GITHUB_STEP_SUMMARY
        echo "- **Image:** ${{ needs.build-and-test.outputs.image-tag }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY

  # Test Environment Deployment  
  deploy-test:
    needs: build-and-test
    runs-on: [self-hosted, kubernetes, discord-bot]
    if: github.ref == 'refs/heads/test' || github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'test')
    environment: 
      name: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Log deployment start
      run: |
        echo "🧪 Starting test deployment for Kallax bot..."
        echo "Commit: ${{ github.sha }}"
        echo "Author: ${{ github.actor }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Directory: ${{ env.BOT_DIRECTORY }}"

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: ${{ env.BOT_DIRECTORY }}/requirements.txt

    - name: Install dependencies and test
      working-directory: ${{ env.BOT_DIRECTORY }}
      run: |
        echo "📦 Installing dependencies..."
        pip install -r requirements.txt
        pip install flake8
        
        echo "🔍 Running quick validation..."
        python -c "from utils.database import Database; from utils.bgg_api import BGGApiClient; print('✅ Bot modules working')"
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || true

    - name: Create test namespace
      run: |
        echo "🧪 Setting up test environment..."
        kubectl create namespace gamer-gambit-test --dry-run=client -o yaml | kubectl apply -f -

    - name: Check test secrets
      run: |
        echo "🔍 Checking test environment secrets..."
        
        # Check if required secrets exist
        if ! kubectl get secret kallax-test-config -n gamer-gambit-test > /dev/null 2>&1; then
          echo "❌ Error: kallax-test-config secret not found in gamer-gambit-test namespace"
          echo "Please apply your secrets.yaml file first:"
          echo "  kubectl apply -f discord/kallax/k8s/secrets.yaml"
          exit 1
        fi
        
        if ! kubectl get secret kallax-test-api-keys -n gamer-gambit-test > /dev/null 2>&1; then
          echo "⚠️ Warning: kallax-test-api-keys secret not found (API features may not work)"
        fi
        
        echo "✅ Required secrets found"

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for test
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=test,enable=${{ github.ref_name == 'test' }}
        flavor: |
          latest=auto
          prefix=
          suffix=

    - name: Build and push test Docker image
      uses: docker/build-push-action@v5
      with:
        context: ${{ env.BOT_DIRECTORY }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Deploy to test environment
      run: |
        echo "🚀 Deploying Kallax bot to test environment..."
        
        # Get the test image tag (lowercase for registry compatibility)
        REPO_OWNER_LOWER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
        IMAGE_TAG="${{ env.REGISTRY }}/${REPO_OWNER_LOWER}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}"
        echo "Using image: $IMAGE_TAG"
        
        # Apply test environment configuration using kustomize
        echo "📋 Applying kustomization..."
        kubectl apply -k discord/kallax/k8s/environments/test/
        
        # Update the deployment with the freshly built image
        echo "🔄 Updating deployment image..."
        kubectl set image deployment/test-kallax kallax="$IMAGE_TAG" -n gamer-gambit-test
        
        # Wait for rollout to complete
        echo "⏳ Waiting for deployment rollout..."
        kubectl rollout status deployment/test-kallax -n gamer-gambit-test --timeout=300s

    - name: Run integration tests
      run: |
        echo "🔍 Running integration tests..."
        sleep 30  # Wait for bot to fully initialize
        
        # Check if bot is responding
        kubectl logs -n gamer-gambit-test deployment/test-kallax --tail=10 || \
        kubectl logs -n gamer-gambit-test deployment/kallax --tail=10
        
        echo "Integration tests completed"

    - name: Test deployment summary
      if: success()
      run: |
        echo "## 🧪 Test Deployment Successful!" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment:** Test" >> $GITHUB_STEP_SUMMARY
        echo "- **Namespace:** gamer-gambit-test" >> $GITHUB_STEP_SUMMARY
        echo "- **Image:** ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY

  # Cleanup old test deployments on PR close
  cleanup-test:
    runs-on: [self-hosted, kubernetes, discord-bot]
    if: github.event.action == 'closed' && github.event.pull_request
    steps:
    - name: Cleanup test environment
      run: |
        echo "🧹 Cleaning up test environment for PR #${{ github.event.number }}"
        kubectl delete deployment test-kallax -n gamer-gambit-test || true
        echo "Test environment cleanup completed"
