name: Jarvfjallet Production Deployment

on:
  push:
    branches: [ main ]
    paths:
      - 'discord/jarvfjallet-py/**'
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if no changes'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: jarvfjallet-discord-bot
  BOT_DIRECTORY: discord/jarvfjallet-py

jobs:
  build-and-deploy:
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Log deployment start
      run: |
        echo "üöÄ Starting production deployment for Jarvfjallet bot..."
        echo "Commit: ${{ github.sha }}"
        echo "Author: ${{ github.actor }}"
        echo "Directory: ${{ env.BOT_DIRECTORY }}"

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: ${{ env.BOT_DIRECTORY }}/requirements.txt

    - name: Install dependencies and lint
      working-directory: ${{ env.BOT_DIRECTORY }}
      run: |
        echo "üì¶ Installing dependencies..."
        pip install -r requirements.txt
        pip install flake8
        
        echo "üîç Running code linting..."
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Validate bot code
      working-directory: ${{ env.BOT_DIRECTORY }}
      run: |
        echo "üîç Validating bot structure..."
        python -c "
        import os, sys
        if not os.path.exists('bot.py'):
            print('‚ùå bot.py not found')
            sys.exit(1)
        if not os.path.exists('requirements.txt'):
            print('‚ùå requirements.txt not found')
            sys.exit(1)
        if not os.path.exists('Dockerfile'):
            print('‚ùå Dockerfile not found')
            sys.exit(1)
        print('‚úÖ Bot structure validation passed')
        "

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/2molaf/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=main,enable={{is_default_branch}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ${{ env.BOT_DIRECTORY }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Update Kubernetes deployment
      run: |
        echo "üîÑ Updating production deployment..."
        kubectl set image deployment/jarvfjallet jarvfjallet=${{ env.REGISTRY }}/2molaf/${{ env.IMAGE_NAME }}:main -n gamer-gambit
        kubectl rollout status deployment/jarvfjallet -n gamer-gambit --timeout=300s

    - name: Verify deployment
      run: |
        echo "‚úÖ Verifying deployment..."
        kubectl get pods -n gamer-gambit -l app=jarvfjallet
        kubectl logs -n gamer-gambit deployment/jarvfjallet --tail=20

    - name: Notify deployment success
      if: success()
      run: |
        echo "üéâ Production deployment successful!"
        echo "Jarvfjallet bot is now running the latest code from main branch"
        echo "Image: ${{ env.REGISTRY }}/2molaf/${{ env.IMAGE_NAME }}:main"

    - name: Notify deployment failure
      if: failure()
      run: |
        echo "‚ùå Production deployment failed!"
        echo "Check the logs and fix any issues"
